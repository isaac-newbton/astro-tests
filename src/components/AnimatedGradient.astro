---

import { GlowParticle } from '@assets/scripts/GlowParticle.js'

---

<canvas class="animated-gradient"></canvas>

<style lang="scss">
    canvas {
        display: block;
        width: 100%;
        height: 100%;
        pointer-events: none;
        background-color: #444;
    }
</style>

<script>import { GlowParticle } from "@assets/scripts/GlowParticle"

    const COLORS = [
        {r: 15, g: 24, b: 77},
        {r: 80, g: 85, b: 29},
        {r: 85, g: 34, b: 78},
        {r: 15, g: 74, b: 88},
        {r: 18, g: 73, b: 27},
    ]

    class AnimatedGradient {
        canvas
        ctx
        pixelRatio
        totalParticles
        particles
        maxRadius
        minRadius
        stageWidth
        stageHeight
        curTime
        prevTime
        mousePos = {x: -10, y: -10}

        constructor() {
            this.canvas = document.querySelector('.animated-gradient')
            this.ctx = this.canvas.getContext('2d')
            this.pixelRatio = 0.25
            this.totalParticles = 15
            this.particles = []
            this.maxRadius = (document.body.clientWidth + document.body.clientHeight) * 0.375
            this.minRadius = (document.body.clientWidth + document.body.clientHeight) * 0.250
            this.prevTime = Date.now()

            window.addEventListener("resize", this.resize.bind(this), false)
            this.resize()

            window.addEventListener("mousemove", (e)=>{
                this.mousePos = { x: e.clientX, y: e.clientY }
            })

            setInterval(this.createMouseParticle.bind(this), 33)

            window.requestAnimationFrame(this.animate.bind(this))
        }

        resize() {
            this.stageWidth = document.body.clientWidth
            this.stageHeight = document.body.clientHeight

            this.canvas.width = this.stageWidth * this.pixelRatio
            this.canvas.height = this.stageHeight * this.pixelRatio

            this.ctx.scale(this.pixelRatio, this.pixelRatio)

            this.ctx.globalCompositeOperation = "darken"

            this.createParticles()
        }

        createParticles() {
            let curColor = 0
            this.particles = []

            for(let i = 0; i < this.totalParticles; i++) {
                const particle = new GlowParticle(
                    Math.random() * this.stageWidth,
                    Math.random() * this.stageHeight,
                    this.minRadius + (Math.random() * (this.maxRadius - this.minRadius)),
                    COLORS[curColor],
                )

                if(++curColor >= COLORS.length){
                    curColor = 0
                }

                this.particles[i] = particle
            }
        }

        createMouseParticle() {
            if(0 > this.mousePos.x || this.stageWidth < this.mousePos.x || 0 > this.mousePos.y || this.stageHeight < this.mousePos.y) {
                return
            }
            const particle = new GlowParticle(
                this.mousePos.x,
                this.mousePos.y,
                Math.random() * this.minRadius * 0.5,
                {r: 0, g: 0, b: 0},
                3000
            )
            this.totalParticles += 1
            this.particles.push(particle)
        }

        creatNoise(){
            const iData = this.ctx.createImageData(this.canvas.width, this.canvas.height)
            const buffer32 = new Uint32Array(iData.data.buffer)
            const len = buffer32.length

            for(let i = 0; i < len;i++) {
                if (Math.random() < 0.5){
                    buffer32[i] = 0xff404040;
                } else {
                    buffer32[i] = 0xff444444;
                }
            }

            // this.ctx.putImageData(iData, 0, 0);
        }

        animate() {
            this.curTime = Date.now()
            const deltaTime = this.curTime - this.prevTime
            this.prevTime = this.curTime
            window.requestAnimationFrame(this.animate.bind(this))
            this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight)
            this.creatNoise()
            for(let i = 0; i < this.totalParticles; i++) {
                const particle = this.particles[i]
                if(null!==particle.lifetime && 0 >= particle.lifetime) {
                    this.particles.splice(i, 1)
                    this.totalParticles -= 1
                    continue;
                }
                particle.animate(this.ctx, this.stageWidth, this.stageHeight, deltaTime)
            }
        }
    }

    window.addEventListener("DOMContentLoaded", ()=>{
        new AnimatedGradient()
    })
</script>